#!/usr/bin/env python3

#
# NSIS script autogenerator
#
# See LICENSE.md for licensing information
# Roman Luitko, 2020
#

import os
import argparse
import subprocess
import textwrap
import tempfile

class NsisException(Exception):
    pass

class NsisWrapper:
    def get_directory_size(self, start_path):
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(start_path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                # skip if it is symbolic link
                if not os.path.islink(fp):
                    total_size += os.path.getsize(fp)

        return total_size

    def __init__(self, name, executable, tree, outfile):
        size = self.get_directory_size(tree) / 1024
        print(size)
        self.configuration = {
            'app_name':        name,
            'app_version':     '1.0.0',
            'app_executable':  executable,
            'app_size':        size,
            'installer_file':  outfile,
            'installer_lang':  'English',
            'installer_cover': None,
            'installer_icon':  None,
            'publisher':       None,
            'website':         None,
            'file_tree':       os.path.join(tree, '*.*')
        }

    def set_author(self, author):
        self.configuration['publisher'] = author

    def set_version(self, version):
        self.configuration['app_version'] = version

    def set_cover(self, cover):
        if not os.path.isfile(cover):
            raise NsisException('Unable to find %s!' % cover)
        self.configuration['installer_cover'] = cover

    def set_icon(self, icon):
        if not os.path.isfile(icon):
            raise NsisException('Unable to find %s!' % cover)
        self.configuration['installer_icon'] = icon

    def build(self):
        return textwrap.dedent(
            '''
            ;            _                     _       _
            ;  _ __  ___(_)___   ___  ___ _ __(_)_ __ | |_
            ; | '_ \/ __| / __| / __|/ __| '__| | '_ \| __|
            ; | | | \__ \ \__ \_\__ \ (__| |  | | |_) | |_
            ; |_| |_|___/_|___(_)___/\___|_|  |_| .__/ \__|
            ;                                   |_|
            ; Autogenerated file. DO NOT EDIT!

            !include "MUI2.nsh"

            ; Common settings
            Unicode                                True
            RequestExecutionLevel                  admin
            Name                                   "{app_name}"
            OutFile                                "{installer_file}"
            InstallDir                             "$PROGRAMFILES\\{app_name}"
            InstallDirRegKey                       HKCU "Software\\{app_name}" ""

            ; Common constants (windows registry keys)
            !define UNINST_REG_KEY "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{app_name}"
            '''

            + ('''
            ; Cover image
            !define MUI_WELCOMEFINISHPAGE_BITMAP   "{installer_cover}"
            !define MUI_UNWELCOMEFINISHPAGE_BITMAP "{installer_cover}"
            ''' if self.configuration['installer_cover'] else '')

            + ('''
            ; Icons
            !define MUI_ICON                       "{installer_icon}"
            !define MUI_UNICON                     "{installer_icon}"
            ''' if self.configuration['installer_icon'] else '')

            + '''
            ; Page layout
            !insertmacro MUI_PAGE_WELCOME
            !insertmacro MUI_PAGE_DIRECTORY
            !insertmacro MUI_PAGE_INSTFILES
            !insertmacro MUI_PAGE_FINISH
            !insertmacro MUI_UNPAGE_WELCOME
            !insertmacro MUI_UNPAGE_INSTFILES
            !insertmacro MUI_LANGUAGE "{installer_lang}"

            !define MUI_ABORTWARNING
            !define MUI_FINISHPAGE_RUN             "$INSTDIR\\{app_executable}"

            Section "install"
                SetOutPath "$INSTDIR"

                ; Shortcuts
                CreateShortCut "$SMPROGRAMS\{app_name}.lnk" "$INSTDIR\{app_executable}"
                CreateShortCut "$DESKTOP\{app_name}.lnk" "$INSTDIR\{app_executable}"

                ; Store installation folder
                WriteRegStr HKCU "Software\\{app_name}" "" $INSTDIR

                ; Uninstall information
                WriteRegStr   HKLM "${{UNINST_REG_KEY}}" "DisplayName" "{app_name}"
                WriteRegStr   HKLM "${{UNINST_REG_KEY}}" "UninstallString" "$INSTDIR\\Uninstall.exe"
                '''

                + ('''
                ; Icon for uninstallation menu
                WriteRegStr   HKLM "${{UNINST_REG_KEY}}" "DisplayIcon" "$INSTDIR\\{installer_icon}"
                ''' if self.configuration['installer_icon'] else '')

                + ('''
                ; App publisher
                WriteRegStr   HKLM "${{UNINST_REG_KEY}}" "Publisher" "{publisher}"
                ''' if self.configuration['publisher'] else '')

                + ('''
                ; App publisher
                WriteRegStr   HKLM "${{UNINST_REG_KEY}}" "HelpLink" "{website}"
                ''' if self.configuration['website'] else '')

                + '''
                WriteRegDword HKLM "${{UNINST_REG_KEY}}" "EstimatedSize" {app_size}
                WriteRegStr   HKLM "${{UNINST_REG_KEY}}" "DisplayVersion" "{app_version}"

                ; Files
                WriteUninstaller "$INSTDIR\\Uninstall.exe"
                SetOutPath "$INSTDIR"
                File /r "{file_tree}"
            SectionEnd

            Section "Uninstall"
                ; Delete shortcuts
                Delete "$SMPROGRAMS\\{app_name}.lnk"
                Delete "$DESKTOP\\{app_name}.lnk"

                ; Delete registry entries
                DeleteRegKey HKCU "Software\\{app_name}"
                DeleteRegKey HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{app_name}"

                ;Files
                Delete "$INSTDIR\\Uninstall.exe"
                RMDir "$INSTDIR"
            SectionEnd
            ''').format(**self.configuration)

    def __str__(self):
        return self.generate()

class NsisRunner:
    def run(self, script):
        subprocess.call(["makensis", "-NOCD", script])

class App:
    def __init__(self):
        parser = argparse.ArgumentParser()

        parser.add_argument('--name',    help='application name', required=True)
        parser.add_argument('--exe',     help='project main exe', required=True)
        parser.add_argument('--dir',     help='path to files', required=True)
        parser.add_argument('--outfile', help='write installer to', required=True)
        parser.add_argument('--icon',    help='path to installer icon')
        parser.add_argument('--cover',   help='path to a cover image')
        parser.add_argument('--lang',    help='installer language')
        parser.add_argument('--version', help='application version')
        parser.add_argument('--author',  help='application author')
        parser.add_argument('--show',    help='print resulted script',
                default=False, action='store_true')

        self.args = parser.parse_args()

    def main(self):
        wrapper = NsisWrapper(self.args.name, self.args.exe, self.args.dir,
                                                    self.args.outfile)

        if self.args.version:
            wrapper.set_version(self.args.version)
        if self.args.cover:
            wrapper.set_cover(self.args.cover)
        if self.args.lang:
            wrapper.set_lang(self.args.lang)
        if self.args.icon:
            wrapper.set_icon(self.args.icon)
        if self.args.author:
            wrapper.set_author(self.args.author)

        script = wrapper.build()
        if self.args.show:
            print(script)

        fd, path = tempfile.mkstemp()
        try:
            with os.fdopen(fd, 'w') as tmp:
                tmp.write(script)

            makensis = NsisRunner()
            makensis.run(script=path)

        finally:
            os.remove(path)

if __name__ == '__main__':
    app = App()
    app.main()

